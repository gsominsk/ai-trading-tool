"""
–¢–µ—Å—Ç—ã –¥–ª—è edge cases —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (MACD, MA, MA_trend).

–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö:
- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
- –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–µ–Ω—ã (–Ω—É–ª–µ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
- –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
- –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
"""

import pytest
from unittest.mock import Mock, patch
from decimal import Decimal
from datetime import datetime, timedelta
import pandas as pd
from src.market_data.market_data_service import MarketDataService

def generate_edge_case_klines(scenario: str, count: int = 50) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç klines –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö edge case —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    klines = []
    current_time = int((datetime.now() - timedelta(hours=count)).timestamp() * 1000)
    
    if scenario == "insufficient_data":
        count = 5  # –ú–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ –¥–ª—è MACD (26)
    elif scenario == "zero_volatility":
        price = 50000.0  # –í—Å–µ —Ü–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    elif scenario == "extreme_volatility":
        prices = [50000.0 * (2 if i % 2 == 0 else 0.5) for i in range(count)]  # ¬±100% –∫–æ–ª–µ–±–∞–Ω–∏—è
    elif scenario == "gradual_increase":
        prices = [50000.0 + i * 100 for i in range(count)]  # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–æ—Å—Ç
    elif scenario == "gradual_decrease":
        prices = [50000.0 - i * 100 for i in range(count)]  # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
    elif scenario == "single_spike":
        prices = [50000.0] * count
        prices[count//2] = 100000.0  # –û–¥–∏–Ω —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–ø–∞–π–∫
    else:  # normal
        prices = [50000.0 + (i % 10 - 5) * 50 for i in range(count)]  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
    
    for i in range(count):
        if scenario == "zero_volatility":
            open_p = close_p = high_p = low_p = price
        elif scenario in ["extreme_volatility", "gradual_increase", "gradual_decrease", "single_spike"]:
            open_p = close_p = prices[i]
            high_p = open_p * 1.01
            low_p = open_p * 0.99
        else:
            price = 50000.0 + (i % 10 - 5) * 50
            open_p = close_p = price
            high_p = price * 1.01
            low_p = price * 0.99
        
        volume = 1000.0 + i * 10
        
        kline = [
            current_time + (i * 3600000),  # timestamp
            f"{open_p:.8f}",               # open
            f"{high_p:.8f}",               # high  
            f"{low_p:.8f}",                # low
            f"{close_p:.8f}",              # close
            f"{volume:.8f}",               # volume
            current_time + (i * 3600000) + 3599999,  # close_time
            f"{volume * close_p:.8f}",     # quote_asset_volume
            1000 + i,                      # number_of_trades
            f"{volume * 0.6:.8f}",         # taker_buy_base_asset_volume
            f"{volume * close_p * 0.6:.8f}",  # taker_buy_quote_asset_volume
            "0"                            # ignore
        ]
        
        klines.append(kline)
    
    return klines

def test_rsi_edge_cases():
    """–¢–µ—Å—Ç RSI –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö."""
    print("=== –¢–ï–°–¢ RSI EDGE CASES ===\n")
    
    service = MarketDataService()
    
    scenarios = [
        ("insufficient_data", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (5 —Å–≤–µ—á–µ–π)"),
        ("zero_volatility", "–ù—É–ª–µ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≤—Å–µ —Ü–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)"),
        ("extreme_volatility", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (¬±100%)"),
        ("gradual_increase", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–æ—Å—Ç"),
        ("gradual_decrease", "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ")
    ]
    
    for scenario, description in scenarios:
        print(f"üîç –°—Ü–µ–Ω–∞—Ä–∏–π: {description}")
        
        klines = generate_edge_case_klines(scenario)
        
        with patch('requests.get') as mock_get:
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.raise_for_status.return_value = None
            mock_response.json.return_value = klines
            mock_get.return_value = mock_response
            
            try:
                result = service.get_market_data("BTCUSDT")
                rsi = result.rsi_14
                
                print(f"   RSI: {rsi} (—Ç–∏–ø: {type(rsi)})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å RSI
                assert isinstance(rsi, Decimal), f"RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal, –ø–æ–ª—É—á–µ–Ω {type(rsi)}"
                assert 0 <= rsi <= 100, f"RSI –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü [0,100]: {rsi}"
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
                if scenario == "insufficient_data":
                    # –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π RSI
                    assert rsi == Decimal('50.0'), f"–ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 50.0, –ø–æ–ª—É—á–µ–Ω {rsi}"
                    
                elif scenario == "zero_volatility":
                    # –ü—Ä–∏ –Ω—É–ª–µ–≤–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 50 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
                    assert rsi == Decimal('50.0'), f"–ü—Ä–∏ –Ω—É–ª–µ–≤–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 50.0, –ø–æ–ª—É—á–µ–Ω {rsi}"
                    
                elif scenario == "gradual_increase":
                    # –ü—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–æ—Å—Ç–µ RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—Å–æ–∫–∏–º (>70)
                    assert rsi >= Decimal('70.0'), f"–ü—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–æ—Å—Ç–µ RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >70, –ø–æ–ª—É—á–µ–Ω {rsi}"
                    
                elif scenario == "gradual_decrease":
                    # –ü—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –ø–∞–¥–µ–Ω–∏–∏ RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∑–∫–∏–º (<30)
                    assert rsi <= Decimal('30.0'), f"–ü—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –ø–∞–¥–µ–Ω–∏–∏ RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <30, –ø–æ–ª—É—á–µ–Ω {rsi}"
                
                print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                if scenario == "insufficient_data":
                    print(f"   ‚ÑπÔ∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ RSI")
                else:
                    raise
        
        print()

def test_macd_edge_cases():
    """–¢–µ—Å—Ç MACD –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö."""
    print("=== –¢–ï–°–¢ MACD EDGE CASES ===\n")
    
    service = MarketDataService()
    
    scenarios = [
        ("insufficient_data", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MACD"),
        ("zero_volatility", "–ù—É–ª–µ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"),
        ("extreme_volatility", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"),
        ("single_spike", "–ï–¥–∏–Ω–∏—á–Ω—ã–π —Å–ø–∞–π–∫ –≤ –¥–∞–Ω–Ω—ã—Ö")
    ]
    
    for scenario, description in scenarios:
        print(f"üîç –°—Ü–µ–Ω–∞—Ä–∏–π: {description}")
        
        klines = generate_edge_case_klines(scenario, 30)  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è MACD
        
        with patch('requests.get') as mock_get:
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.raise_for_status.return_value = None
            mock_response.json.return_value = klines
            mock_get.return_value = mock_response
            
            try:
                result = service.get_market_data("BTCUSDT")
                macd_signal = result.macd_signal
                
                print(f"   MACD Signal: {macd_signal}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å MACD —Å–∏–≥–Ω–∞–ª–∞
                assert macd_signal in ["bullish", "bearish", "neutral"], f"–ù–µ–≤–µ—Ä–Ω—ã–π MACD —Å–∏–≥–Ω–∞–ª: {macd_signal}"
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                if scenario == "insufficient_data":
                    assert macd_signal == "neutral", f"–ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö MACD –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å neutral, –ø–æ–ª—É—á–µ–Ω {macd_signal}"
                    
                elif scenario == "zero_volatility":
                    assert macd_signal == "neutral", f"–ü—Ä–∏ –Ω—É–ª–µ–≤–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ MACD –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å neutral, –ø–æ–ª—É—á–µ–Ω {macd_signal}"
                
                print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                raise
        
        print()

def test_ma_trend_edge_cases():
    """–¢–µ—Å—Ç MA trend –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö."""
    print("=== –¢–ï–°–¢ MA TREND EDGE CASES ===\n")
    
    service = MarketDataService()
    
    scenarios = [
        ("insufficient_data", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"),
        ("gradual_increase", "–ß–µ—Ç–∫–∏–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"),
        ("gradual_decrease", "–ß–µ—Ç–∫–∏–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"),
        ("zero_volatility", "–ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
    ]
    
    for scenario, description in scenarios:
        print(f"üîç –°—Ü–µ–Ω–∞—Ä–∏–π: {description}")
        
        klines = generate_edge_case_klines(scenario, 60)  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è MA50
        
        with patch('requests.get') as mock_get:
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.raise_for_status.return_value = None
            mock_response.json.return_value = klines
            mock_get.return_value = mock_response
            
            try:
                result = service.get_market_data("BTCUSDT")
                ma_trend = result.ma_trend
                ma_20 = result.ma_20
                ma_50 = result.ma_50
                
                print(f"   MA20: {ma_20}")
                print(f"   MA50: {ma_50}")
                print(f"   MA Trend: {ma_trend}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
                assert isinstance(ma_20, Decimal), f"MA20 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal"
                assert isinstance(ma_50, Decimal), f"MA50 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal"
                assert ma_trend in ["uptrend", "downtrend", "sideways"], f"–ù–µ–≤–µ—Ä–Ω—ã–π MA trend: {ma_trend}"
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                if scenario == "gradual_increase":
                    assert ma_trend in ["uptrend", "sideways"], f"–ü—Ä–∏ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ MA trend –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å uptrend, –ø–æ–ª—É—á–µ–Ω {ma_trend}"
                    
                elif scenario == "gradual_decrease":
                    assert ma_trend in ["downtrend", "sideways"], f"–ü—Ä–∏ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ MA trend –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å downtrend, –ø–æ–ª—É—á–µ–Ω {ma_trend}"
                    
                elif scenario == "zero_volatility":
                    assert ma_trend == "sideways", f"–ü—Ä–∏ –Ω—É–ª–µ–≤–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ MA trend –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å sideways, –ø–æ–ª—É—á–µ–Ω {ma_trend}"
                
                print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                raise
        
        print()

def test_division_by_zero_protection():
    """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –≤–æ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö."""
    print("=== –¢–ï–°–¢ –ó–ê–©–ò–¢–´ –û–¢ –î–ï–õ–ï–ù–ò–Ø –ù–ê –ù–û–õ–¨ ===\n")
    
    service = MarketDataService()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ (–≤—Å–µ —Ü–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
    klines = generate_edge_case_klines("zero_volatility", 60)
    
    with patch('requests.get') as mock_get:
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.raise_for_status.return_value = None
        mock_response.json.return_value = klines
        mock_get.return_value = mock_response
        
        try:
            result = service.get_market_data("BTCUSDT")
            
            print(f"‚úÖ RSI: {result.rsi_14} (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            print(f"‚úÖ MACD: {result.macd_signal} (–∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            print(f"‚úÖ MA20: {result.ma_20} (–∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            print(f"‚úÖ MA50: {result.ma_50} (–∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            print(f"‚úÖ MA Trend: {result.ma_trend} (–∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            
            # –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
            assert isinstance(result.rsi_14, Decimal)
            assert result.macd_signal in ["bullish", "bearish", "neutral"]
            assert isinstance(result.ma_20, Decimal)
            assert isinstance(result.ma_50, Decimal)
            assert result.ma_trend in ["uptrend", "downtrend", "sideways"]
            
            print(f"\nüéâ –í–°–ï –ó–ê–©–ò–¢–´ –û–¢ –î–ï–õ–ï–ù–ò–Ø –ù–ê –ù–û–õ–¨ –†–ê–ë–û–¢–ê–Æ–¢!")
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            raise

if __name__ == "__main__":
    test_rsi_edge_cases()
    test_macd_edge_cases() 
    test_ma_trend_edge_cases()
    test_division_by_zero_protection()