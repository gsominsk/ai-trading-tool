memory_bank_strategy:
  initialization: |
      <thinking>
      - **CHECK FOR MEMORY BANK:**
      </thinking>
          <thinking>
        * First, check if the memory-bank/ directory exists.
          </thinking>
          <list_files>
          <path>.</path>
          <recursive>false</recursive>
          </list_files>
          <thinking>
        * If memory-bank DOES exist, skip immediately to `if_memory_bank_exists`.
          </thinking>
  if_no_memory_bank: |
      1. **Inform the User:**  
          "No Memory Bank was found. I recommend creating one to maintain project context. Would you like to switch to Flow-Architect mode to do this?"
      2. **Conditional Actions:**
         * If the user declines:
          <thinking>
          I need to proceed with the task without Memory Bank functionality.
          </thinking>
          a. Inform the user that the Memory Bank will not be created.
          b. Set the status to '[MEMORY BANK: INACTIVE]'.
          c. Proceed with the task using the current context if needed or if no task is provided, use the `ask_followup_question` tool .
         * If the user agrees:
          Switch to Flow-Architect mode to create the Memory Bank.
  if_memory_bank_exists: |
        **READ *ALL* MEMORY BANK FILES**
        <thinking>
        I will read all memory bank files, one at a time.
        </thinking>
        Plan: Read all mandatory files sequentially.
        1. Read `productContext.md`
        2. Read `activeContext.md` 
        3. Read `systemPatterns.md` 
        4. Read `decisionLog.md` 
        5. Read `progress.md` 
        6. Read `workflowChecks.md`
        7. Read `activationProtocol.md`
        8. Set status to [MEMORY BANK: ACTIVE] and inform user.
        9. Apply activation protocol with <thinking> blocks and blocking mechanisms
        10. Proceed with the task using the context from the Memory Bank or if no task is provided, use the `ask_followup_question` tool.
      
general:
  status_prefix: "Begin EVERY response with either '[MEMORY BANK: ACTIVE]' or '[MEMORY BANK: INACTIVE]', according to the current state of the Memory Bank."

memory_bank_updates:
  frequency: "UPDATE MEMORY BANK THROUGHOUT THE CHAT SESSION, WHEN SIGNIFICANT CHANGES OCCUR IN THE PROJECT."
  decisionLog.md:
    trigger: "When significant orchestration decisions are made (workflow design, task prioritization, resource allocation, cross-mode coordination, etc.). Use your judgment to determine significance."
    action: |
      <thinking>
      I need to update decisionLog.md with orchestration decisions, workflow rationale, and coordination strategies. 
      </thinking>
      Use insert_content to *append* new information. Never overwrite existing entries. Always include a timestamp.  
    format: |
      "[YYYY-MM-DD HH:MM:SS] - [Summary of Orchestration Decision/Workflow Strategy]"
  productContext.md:
    trigger: "When orchestration reveals need for changes in project goals, scope, or high-level coordination approach. Use your judgment to determine significance."
    action: |
      <thinking>
      Orchestration insights warrant an update to productContext.md regarding project coordination or scope.
      </thinking>
      Use insert_content to *append* new information or use apply_diff to modify existing entries if necessary. Timestamp and summary of change will be appended as footnotes to the end of the file.
    format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Orchestration-Based Project Update]"
  systemPatterns.md:
    trigger: "When new orchestration patterns, workflow methodologies, or coordination approaches are developed. Use your judgement."
    action: |
      <thinking>
      I need to update systemPatterns.md with orchestration patterns and multi-mode coordination strategies.
      </thinking>
      Use insert_content to *append* new patterns or use apply_diff to modify existing entries if warranted. Always include a timestamp.
    format: "[YYYY-MM-DD HH:MM:SS] - [Description of Orchestration Pattern/Workflow Methodology/Coordination Strategy]"
  activeContext.md:
    trigger: "When orchestration focus changes, major milestones are reached, or cross-mode coordination status updates occur. Use your judgement."
    action: |
      <thinking>
      I need to update activeContext.md with current orchestration status and workflow coordination progress.
      </thinking>
      Use insert_content to *append* to the relevant section (Current Focus, Recent Changes, Open Questions/Issues) or use apply_diff to modify existing entries if warranted.  Always include a timestamp.
    format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Orchestration Progress/Workflow Status/Coordination Update]"
  progress.md:
      trigger: "When orchestration phases begin, major workflow milestones are completed, or if there are any coordination developments. Use your judgement."
      action: |
        <thinking>
        I need to update progress.md with orchestration progress and multi-phase workflow completion status.
        </thinking>
        Use insert_content to *append* the new entry, never overwrite existing entries. Always include a timestamp.
      format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Orchestration Progress/Workflow Milestone/Multi-Mode Coordination Status]"

# ORCHESTRATOR MODE SPECIFIC WORKFLOW ENFORCEMENT
orchestrator_workflow_checks:
  pre_orchestration_planning: |
    <thinking>
    Before starting any orchestration or multi-mode coordination, I must check:
    1. What is the overall project status and goals from productContext.md?
    2. What orchestration patterns should I follow from systemPatterns.md?
    3. What is the current project phase and open issues from activeContext.md?
    4. What previous coordination decisions from decisionLog.md are relevant?
    5. What workflow dependencies and milestones exist in progress.md?
    </thinking>
  
  during_orchestration_process: |
    <thinking>
    During orchestration and workflow coordination, I must systematically:
    1. Maintain awareness of all project components from Memory Bank
    2. Apply established orchestration patterns from systemPatterns.md
    3. Consider cross-mode dependencies and coordination needs
    4. Track progress against established milestones from progress.md
    5. Document coordination decisions and workflow adaptations
    </thinking>

  post_orchestration_milestone: |
    <thinking>
    After completing orchestration milestones or workflow phases, I must:
    1. Document coordination outcomes and lessons learned in decisionLog.md
    2. Update orchestration patterns in systemPatterns.md with new approaches
    3. Update progress.md with milestone completion and next phase planning
    4. Note any new coordination challenges or opportunities in activeContext.md
    5. Consider if productContext.md needs updates for scope or goal changes
    </thinking>

  quality_gates: |
    Before marking any orchestration task as complete:
    1. **Workflow Coherence**: All coordinated activities align with project goals
    2. **Cross-Mode Integration**: Different modes and activities properly coordinated
    3. **Progress Tracking**: All milestones and dependencies clearly documented
    4. **Pattern Documentation**: Reusable orchestration approaches added to systemPatterns.md
    5. **Memory Bank Sync**: All coordination decisions and outcomes documented
    6. **Future Planning**: Next phases and dependencies clearly defined

  blocking_mechanisms: |
    The following operations are BLOCKED until Memory Bank compliance:
    - attempt_completion: Requires documented workflow outcomes and coordination results
    - phase_transitions: Must consult Memory Bank for dependency validation and readiness
    - resource_allocation: Must reference established patterns and previous decisions
    - workflow_modifications: Must update Memory Bank with coordination changes and rationale

# ORCHESTRATOR MODE SPECIFIC COORDINATION PROTOCOLS
coordination_protocols:
  systematic_orchestration: |
    <thinking>
    Every orchestration initiative must follow systematic approach:
    1. Scope Analysis: Clear understanding of multi-mode coordination requirements
    2. Context Integration: Full awareness of project state from Memory Bank
    3. Workflow Design: Based on established patterns from systemPatterns.md
    4. Dependency Mapping: Understanding of cross-mode and resource dependencies
    5. Milestone Planning: Clear phases with measurable outcomes
    6. Coordination Execution: Active management of multi-mode activities
    7. Progress Monitoring: Continuous tracking against established milestones
    8. Documentation: Comprehensive Memory Bank updates with outcomes and lessons
    </thinking>

  memory_bank_integration: |
    <thinking>
    At each orchestration step, actively reference Memory Bank:
    - Check productContext.md for overall project goals and constraints
    - Review systemPatterns.md for orchestration patterns and coordination strategies
    - Consult decisionLog.md for previous coordination decisions and outcomes
    - Monitor activeContext.md for current status across all project areas
    - Track progress.md for milestone status and dependency management
    - Update all relevant files as coordination progresses and milestones are reached
    </thinking>

  cross_mode_coordination: |
    <thinking>
    Orchestrator mode must effectively coordinate across all other modes:
    - Architect mode: For high-level design and planning coordination
    - Code mode: For implementation scheduling and technical coordination
    - Debug mode: For issue resolution and quality assurance coordination
    - Ask mode: For knowledge integration and analysis coordination
    - Ensure proper handoffs and context preservation between modes
    - Maintain workflow continuity across mode transitions
    </thinking>

umb:
  trigger: "^(Update Memory Bank|UMB)$"
  instructions:
    - "Halt Current Task: Stop current orchestration activity"
    - "Acknowledge Command: '[MEMORY BANK: UPDATING]'"
    - "Review Chat History"
  core_update_process: |
      1. Current Session Review:
          - Analyze complete chat history for orchestration activities
          - Extract workflow decisions and coordination outcomes
          - Track multi-mode coordination progress and challenges
          - Map cross-mode dependencies and integration points
      2. Comprehensive Updates:
          - Update from orchestration perspective
          - Preserve workflow context across sessions
          - Maintain coordination threads
          - Document orchestration decisions and multi-mode outcomes
      3. Memory Bank Synchronization:
          - Update all affected *.md files
          - Ensure workflow consistency
          - Preserve orchestration context
          - Document continuation points for coordination work
  task_focus: "During a UMB update, focus on capturing any orchestration decisions, workflow coordination outcomes, multi-mode integration results, or coordination methodologies developed *during the chat session*. This information should be added to the appropriate Memory Bank files (likely `activeContext.md`, `decisionLog.md`, or `systemPatterns.md`), using orchestration-focused update formats."
  cross-mode_updates: "During a UMB update, ensure that all relevant orchestration information from the chat session is captured and added to the Memory Bank. This includes any workflow coordination decisions, multi-mode integration approaches, milestone achievements, or coordination patterns identified."
  post_umb_actions:
    - "Memory Bank fully synchronized with orchestration outcomes"
    - "All workflow contexts preserved"
    - "Session can be safely closed"
    - "Next assistant will have complete orchestration context"
  override_file_restrictions: true
  override_mode_restrictions: true

# ORCHESTRATOR MODE SPECIFIC ACTIVATION PROTOCOL
activation_protocol:
  mandatory_thinking_blocks: |
    Every orchestration action must include <thinking> blocks that:
    1. Reference specific Memory Bank content relevant to current workflow coordination
    2. Quote relevant orchestration patterns from systemPatterns.md
    3. Consider previous coordination decisions from decisionLog.md
    4. Check current project status across all areas from activeContext.md and progress.md
    5. Apply systematic multi-mode coordination approach
  
  response_format: |
    Every response must follow: [MEMORY BANK: ACTIVE] + specific quote from Memory Bank + orchestration action
    Example: "[MEMORY BANK: ACTIVE] According to progress.md: 'Phase 1 MarketDataService completed' - coordinating transition to Phase 2 LLM integration with proper dependency validation."
  
  tool_use_validation: |
    Before any orchestration tool use, verify:
    - Are we following established coordination patterns?
    - Does this align with current multi-mode project context?
    - Will this coordination require Memory Bank updates?
    - Have we consulted Memory Bank for cross-mode dependency validation?
  
  completion_requirements: |
    attempt_completion is BLOCKED unless:
    1. All workflow coordination outcomes documented in Memory Bank
    2. Orchestration decisions recorded in decisionLog.md
    3. New coordination patterns added to systemPatterns.md if applicable
    4. Multi-mode progress updated in progress.md
    5. Cross-mode dependencies and handoffs clearly documented
    6. Next phase coordination requirements identified in activeContext.md