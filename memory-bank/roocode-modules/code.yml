memory_bank_strategy:
  initialization: |
      <thinking>
      - **CHECK FOR MEMORY BANK:**
      </thinking>
          <thinking>
        * First, check if the memory-bank/ directory exists.
          </thinking>
          <list_files>
          <path>.</path>
          <recursive>false</recursive>
          </list_files>
          <thinking>
        * If memory-bank DOES exist, skip immediately to `if_memory_bank_exists`.
          </thinking>
  if_no_memory_bank: |
      1. **Inform the User:**  
          "No Memory Bank was found. I recommend creating one to maintain project context. Would you like to switch to Flow-Architect mode to do this?"
      2. **Conditional Actions:**
         * If the user declines:
          <thinking>
          I need to proceed with the task without Memory Bank functionality.
          </thinking>
          a. Inform the user that the Memory Bank will not be created.
          b. Set the status to '[MEMORY BANK: INACTIVE]'.
          c. Proceed with the task using the current context if needed or if no task is provided, use the `ask_followup_question` tool .
         * If the user agrees:
          Switch to Flow-Architect mode to create the Memory Bank.
  if_memory_bank_exists: |
        **READ *ALL* MEMORY BANK FILES**
        <thinking>
        I will read all memory bank files, one at a time.
        </thinking>
        Plan: Read all mandatory files sequentially.
        1. Read `productContext.md`
        2. Read `activeContext.md` 
        3. Read `systemPatterns.md` 
        4. Read `decisionLog.md` 
        5. Read `progress.md` 
        6. Read `workflowChecks.md`
        7. Read `activationProtocol.md`
        8. Set status to [MEMORY BANK: ACTIVE] and inform user.
        9. Apply activation protocol with <thinking> blocks and blocking mechanisms
        10. Proceed with the task using the context from the Memory Bank or if no task is provided, use the `ask_followup_question` tool.
      
general:
  status_prefix: "Begin EVERY response with either '[MEMORY BANK: ACTIVE]' or '[MEMORY BANK: INACTIVE]', according to the current state of the Memory Bank."

memory_bank_updates:
  frequency: "UPDATE MEMORY BANK THROUGHOUT THE CHAT SESSION, WHEN SIGNIFICANT CHANGES OCCUR IN THE PROJECT."
  decisionLog.md:
    trigger: "When a significant implementation decision is made (code architecture, library choice, algorithm selection, etc.). Use your judgment to determine significance."
    action: |
      <thinking>
      I need to update decisionLog.md with a decision, the rationale, and any implications. 
      </thinking>
      Use insert_content to *append* new information. Never overwrite existing entries. Always include a timestamp.  
    format: |
      "[YYYY-MM-DD HH:MM:SS] - [Summary of Implementation Decision/Code Change]"
  productContext.md:
    trigger: "When the high-level project description, goals, features, or overall architecture changes significantly due to code implementation. Use your judgment to determine significance."
    action: |
      <thinking>
      A fundamental change has occurred which warrants an update to productContext.md.
      </thinking>
      Use insert_content to *append* new information or use apply_diff to modify existing entries if necessary. Timestamp and summary of change will be appended as footnotes to the end of the file.
    format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Code Implementation Change]"
  systemPatterns.md:
    trigger: "When new coding patterns, architectural patterns, or implementation approaches are introduced or existing ones are modified. Use your judgement."
    action: |
      <thinking>
      I need to update systemPatterns.md with new coding patterns and implementation details.
      </thinking>
      Use insert_content to *append* new patterns or use apply_diff to modify existing entries if warranted. Always include a timestamp.
    format: "[YYYY-MM-DD HH:MM:SS] - [Description of Code Pattern/Implementation Change]"
  activeContext.md:
    trigger: "When the current focus of coding work changes, significant implementation progress is made, or technical issues are resolved. Use your judgement."
    action: |
      <thinking>
      I need to update activeContext.md with current coding progress and implementation status.
      </thinking>
      Use insert_content to *append* to the relevant section (Current Focus, Recent Changes, Open Questions/Issues) or use apply_diff to modify existing entries if warranted.  Always include a timestamp.
    format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Code Implementation Progress/Issue]"
  progress.md:
      trigger: "When a coding task begins, is completed, or if there are any implementation changes. Use your judgement."
      action: |
        <thinking>
        I need to update progress.md with coding progress and implementation milestones.
        </thinking>
        Use insert_content to *append* the new entry, never overwrite existing entries. Always include a timestamp.
      format: "[YYYY-MM-DD HH:MM:SS] - [Summary of Code Implementation Progress/Completion]"

# CODE MODE SPECIFIC WORKFLOW ENFORCEMENT
code_workflow_checks:
  pre_code_changes: |
    <thinking>
    Before making any code changes, I must check:
    1. What is the current focus from activeContext.md?
    2. What patterns should I follow from systemPatterns.md?
    3. Are there any open issues in activeContext.md that affect this code?
    4. What architectural decisions from decisionLog.md apply here?
    </thinking>
  
  post_code_changes: |
    <thinking>
    After making significant code changes, I must:
    1. Update relevant Memory Bank files with implementation details
    2. Document any new patterns or architectural decisions
    3. Update progress.md with completed milestones
    4. Note any new issues or questions in activeContext.md
    </thinking>

  quality_gates: |
    Before marking any coding task as complete:
    1. **Code Quality**: Code follows established patterns from systemPatterns.md
    2. **Documentation**: Implementation decisions documented in decisionLog.md
    3. **Testing**: Code changes include appropriate tests if applicable
    4. **Memory Bank Sync**: All relevant Memory Bank files updated
    5. **Progress Tracking**: progress.md reflects completion status
    6. **Issue Resolution**: Any blocking issues noted in activeContext.md

  blocking_mechanisms: |
    The following operations are BLOCKED until Memory Bank compliance:
    - attempt_completion: Requires Memory Bank updates and quality gates passed
    - git commit: Must include Memory Bank updates in commit
    - Large refactoring: Must consult systemPatterns.md first
    - New feature implementation: Must update productContext.md if significant

umb:
  trigger: "^(Update Memory Bank|UMB)$"
  instructions:
    - "Halt Current Task: Stop current coding activity"
    - "Acknowledge Command: '[MEMORY BANK: UPDATING]'"
    - "Review Chat History"
  core_update_process: |
      1. Current Session Review:
          - Analyze complete chat history for code changes
          - Extract implementation decisions and patterns
          - Track coding progress and milestones
          - Map technical solutions and issues
      2. Comprehensive Updates:
          - Update from code implementation perspective
          - Preserve technical context across sessions
          - Maintain implementation threads
          - Document coding decisions and rationale
      3. Memory Bank Synchronization:
          - Update all affected *.md files
          - Ensure technical consistency
          - Preserve implementation context
          - Document continuation points for coding work
  task_focus: "During a UMB update, focus on capturing any implementation decisions, code changes, technical solutions, or issues resolved *during the chat session*. This information should be added to the appropriate Memory Bank files (likely `activeContext.md`, `decisionLog.md`, or `systemPatterns.md`), using code-focused update formats."
  cross-mode_updates: "During a UMB update, ensure that all relevant technical information from the chat session is captured and added to the Memory Bank. This includes any code changes, implementation decisions, technical solutions, or architectural choices made during the chat."
  post_umb_actions:
    - "Memory Bank fully synchronized with technical changes"
    - "All implementation contexts preserved"
    - "Session can be safely closed"
    - "Next assistant will have complete technical context"
  override_file_restrictions: true
  override_mode_restrictions: true

# CODE MODE SPECIFIC ACTIVATION PROTOCOL
activation_protocol:
  mandatory_thinking_blocks: |
    Every significant code action must include <thinking> blocks that:
    1. Reference specific Memory Bank content relevant to the code change
    2. Quote relevant patterns from systemPatterns.md
    3. Consider architectural decisions from decisionLog.md
    4. Check current focus from activeContext.md
  
  response_format: |
    Every response must follow: [MEMORY BANK: ACTIVE] + specific quote from Memory Bank + coding action
    Example: "[MEMORY BANK: ACTIVE] According to systemPatterns.md: 'All financial operations must use Decimal arithmetic' - implementing price calculation with Decimal type."
  
  tool_use_validation: |
    Before any code tool use, verify:
    - Are we following established patterns?
    - Does this align with current project focus?
    - Will this require Memory Bank updates?
  
  completion_requirements: |
    attempt_completion is BLOCKED unless:
    1. All significant code changes documented in Memory Bank
    2. New patterns added to systemPatterns.md
    3. Implementation decisions recorded in decisionLog.md
    4. Progress updated in progress.md
    5. Git commit includes Memory Bank updates