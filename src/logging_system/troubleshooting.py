"""
Troubleshooting utilities for logging system failures
–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–±–æ–µ–≤ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import subprocess
import os
import sys
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple


def check_service_status(service_name: str) -> Dict[str, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    
    Args:
        service_name: –ò–º—è systemd —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'trading-service')
    
    Returns:
        Dictionary —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–∏—Å–∞
    """
    result = {}
    
    try:
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        status_cmd = f"systemctl status {service_name}"
        status_output = subprocess.run(status_cmd.split(), capture_output=True, text=True)
        result['status'] = status_output.stdout
        result['status_code'] = status_output.returncode
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        show_cmd = f"systemctl show {service_name} --property=ActiveEnterTimestamp,InactiveEnterTimestamp,ExecMainStatus"
        show_output = subprocess.run(show_cmd.split(), capture_output=True, text=True)
        result['timestamps'] = show_output.stdout
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        since_week = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
        journal_cmd = f"journalctl -u {service_name} -p err --since {since_week}"
        journal_output = subprocess.run(journal_cmd.split(), capture_output=True, text=True)
        result['critical_errors'] = journal_output.stdout
        
    except Exception as e:
        result['error'] = f"Failed to check service status: {e}"
    
    return result


def check_disk_space(log_path: str) -> Dict[str, any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ –¥–ª—è –ª–æ–≥–æ–≤
    
    Args:
        log_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∞–º–∏
    
    Returns:
        Dictionary —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏—Å–∫–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
    """
    result = {}
    
    try:
        # –û–±—â–µ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        df_output = subprocess.run(['df', '-h', log_path], capture_output=True, text=True)
        result['disk_usage'] = df_output.stdout
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
        if os.path.exists(log_path):
            du_output = subprocess.run(['du', '-sh', f"{log_path}/*"], capture_output=True, text=True, shell=True)
            result['log_sizes'] = du_output.stdout
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ inodes
            df_inodes = subprocess.run(['df', '-i', log_path], capture_output=True, text=True)
            result['inodes'] = df_inodes.stdout
            
            # –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            find_cmd = f"find {log_path} -size +100M -ls"
            find_output = subprocess.run(find_cmd.split(), capture_output=True, text=True)
            result['large_files'] = find_output.stdout
        else:
            result['error'] = f"Log directory {log_path} does not exist"
            
    except Exception as e:
        result['error'] = f"Failed to check disk space: {e}"
    
    return result


def check_permissions(log_path: str, user: str = None) -> Dict[str, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤
    
    Args:
        log_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∞–º–∏
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ—Ä–≤–∏—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        Dictionary —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞
    """
    result = {}
    
    try:
        if os.path.exists(log_path):
            # –ü—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            ls_output = subprocess.run(['ls', '-la', log_path], capture_output=True, text=True)
            result['permissions'] = ls_output.stdout
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ–∞–π–ª–æ–≤
            stat_output = subprocess.run(['stat', log_path], capture_output=True, text=True)
            result['ownership'] = stat_output.stdout
            
            if user:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                id_output = subprocess.run(['id', user], capture_output=True, text=True)
                result['user_info'] = id_output.stdout
        else:
            result['error'] = f"Log directory {log_path} does not exist"
            
    except Exception as e:
        result['error'] = f"Failed to check permissions: {e}"
    
    return result


def analyze_log_errors(log_path: str, hours_back: int = 24) -> List[str]:
    """
    –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    
    Args:
        log_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∞–º–∏
        hours_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    Returns:
        List –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    critical_patterns = [
        "CRITICAL: Logging system failed",
        "CRITICAL: Failed to configure file logging", 
        "[Errno 28] No space left on device",
        "[Errno 13] Permission denied",
        "[Errno 30] Read-only file system",
        "[Errno 2] No such file or directory"
    ]
    
    errors = []
    
    try:
        if os.path.exists(log_path):
            # –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–∞—Ö
            for log_file in ['trading.log', 'logging_errors.log']:
                file_path = os.path.join(log_path, log_file)
                if os.path.exists(file_path):
                    with open(file_path, 'r') as f:
                        lines = f.readlines()
                        for line in lines:
                            for pattern in critical_patterns:
                                if pattern in line:
                                    errors.append(f"{log_file}: {line.strip()}")
                                    
            # –ü–æ–∏—Å–∫ –≤ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–∞—Ö
            for i in range(1, 8):  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                rotated_file = os.path.join(log_path, f"trading.log.{i}")
                if os.path.exists(rotated_file):
                    try:
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
                        if rotated_file.endswith('.gz'):
                            import gzip
                            with gzip.open(rotated_file, 'rt') as f:
                                lines = f.readlines()
                        else:
                            with open(rotated_file, 'r') as f:
                                lines = f.readlines()
                                
                        for line in lines:
                            for pattern in critical_patterns:
                                if pattern in line:
                                    errors.append(f"trading.log.{i}: {line.strip()}")
                    except:
                        continue
                        
    except Exception as e:
        errors.append(f"Error analyzing logs: {e}")
    
    return errors


def get_quick_diagnosis(service_name: str, log_path: str) -> str:
    """
    –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã (30 —Å–µ–∫—É–Ω–¥)
    
    Args:
        service_name: –ò–º—è systemd —Å–µ—Ä–≤–∏—Å–∞
        log_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∞–º–∏
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –±—ã—Å—Ç—Ä—ã–º –¥–∏–∞–≥–Ω–æ–∑–æ–º –ø—Ä–æ–±–ª–µ–º—ã
    """
    diagnosis = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
    service_status = check_service_status(service_name)
    if 'critical_errors' in service_status and service_status['critical_errors']:
        last_error = service_status['critical_errors'].split('\n')[-2] if service_status['critical_errors'].split('\n')[-1] == '' else service_status['critical_errors'].split('\n')[-1]
        diagnosis.append(f"üö® –ü–û–°–õ–ï–î–ù–Ø–Ø –û–®–ò–ë–ö–ê: {last_error}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    disk_info = check_disk_space(log_path)
    if 'disk_usage' in disk_info:
        lines = disk_info['disk_usage'].split('\n')
        if len(lines) > 1:
            usage_line = lines[1]
            if 'Use%' in lines[0]:  # Header line
                usage_percent = usage_line.split()[-2]  # Last column before mount point
                if usage_percent.rstrip('%').isdigit() and int(usage_percent.rstrip('%')) > 90:
                    diagnosis.append(f"üíæ –ö–†–ò–¢–ò–ß–ù–û: –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {usage_percent}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    perm_info = check_permissions(log_path)
    if 'error' in perm_info:
        diagnosis.append(f"üîí –ü–†–ê–í–ê: {perm_info['error']}")
    
    # 4. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
    log_errors = analyze_log_errors(log_path, 24)
    if log_errors:
        diagnosis.append(f"üìù –ù–ê–ô–î–ï–ù–û –û–®–ò–ë–û–ö –í –õ–û–ì–ê–•: {len(log_errors)}")
        diagnosis.append(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è: {log_errors[-1]}")
    
    if not diagnosis:
        diagnosis.append("‚úÖ –Ø–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    return '\n'.join(diagnosis)


def suggest_fix(service_name: str, log_path: str) -> List[str]:
    """
    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    
    Args:
        service_name: –ò–º—è systemd —Å–µ—Ä–≤–∏—Å–∞
        log_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∞–º–∏
    
    Returns:
        List –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    """
    fixes = []
    
    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
    log_errors = analyze_log_errors(log_path, 24)
    disk_info = check_disk_space(log_path)
    
    for error in log_errors:
        if "No space left on device" in error:
            fixes.extend([
                "# –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ:",
                f"sudo rm {log_path}/trading.log.*.gz",
                f"sudo truncate -s 0 {log_path}/trading.log",
                "# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:",
                f"df -h {log_path}"
            ])
            
        elif "Permission denied" in error:
            fixes.extend([
                "# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:",
                f"sudo chown -R $(whoami):$(whoami) {log_path}",
                f"sudo chmod 755 {log_path}",
                f"sudo chmod 644 {log_path}/*.log",
                "# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:",
                f"ls -la {log_path}"
            ])
            
        elif "Read-only file system" in error:
            fixes.extend([
                "# –ü–µ—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ read-write:",
                f"sudo mount -o remount,rw {log_path}",
                "# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:",
                "sudo fsck -f /dev/sdX  # –∑–∞–º–µ–Ω–∏—Ç–µ X –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–∏—Å–∫"
            ])
            
        elif "No such file or directory" in error:
            fixes.extend([
                "# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤:",
                f"sudo mkdir -p {log_path}",
                f"sudo chown $(whoami):$(whoami) {log_path}",
                f"sudo chmod 755 {log_path}"
            ])
    
    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    fixes.extend([
        "",
        "# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞:",
        f"sudo systemctl start {service_name}",
        f"sudo systemctl status {service_name}",
        "",
        "# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤:",
        f"tail -f {log_path}/trading.log"
    ])
    
    return fixes


def main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    if len(sys.argv) < 3:
        print("Usage: python troubleshooting.py <service_name> <log_path>")
        print("Example: python troubleshooting.py trading-service /var/log/trading")
        sys.exit(1)
    
    service_name = sys.argv[1]
    log_path = sys.argv[2]
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–†–ì–û–í–û–ì–û –°–ï–†–í–ò–°–ê")
    print("=" * 50)
    
    # –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    print("\nüìã –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
    quick_diagnosis = get_quick_diagnosis(service_name, log_path)
    print(quick_diagnosis)
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    print("\nüîß –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    fixes = suggest_fix(service_name, log_path)
    for fix in fixes:
        print(fix)
    
    print("\nüìö –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: memory-bank/logging_troubleshooting_guide.md")


if __name__ == "__main__":
    main()