#!/usr/bin/env python3

import sys
import os
sys.path.append('.')

# Clear previous test logs
if os.path.exists('logs/trading_operations.log'):
    os.remove('logs/trading_operations.log')

print('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MARKERDATASERVICE –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ===')
print()

# Test the actual MarketDataService
from src.market_data.market_data_service import MarketDataService

# Create service with logging enabled
service = MarketDataService(enable_logging=True)
print('‚úÖ MarketDataService —Å–æ–∑–¥–∞–Ω —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º')

print('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö BTCUSDT...')

# Get market data (this should generate logs)
try:
    data = service.get_market_data('BTCUSDT')
    print('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    print(f'üìä RSI: {data.rsi_14}')
    print(f'üí∞ Current Price: {data.h1_candles.iloc[-1]["close"]:.2f}')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞: {e}')

print()
print('üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª...')

# Check the log file
log_file = 'logs/trading_operations.log'
if os.path.exists(log_file):
    with open(log_file, 'r') as f:
        lines = f.readlines()
    print(f'üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ª–æ–≥–æ–≤: {log_file}')
    print(f'üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(lines)}')
    print()
    print('üîç –ü–ï–†–í–´–ï 5 –ó–ê–ü–ò–°–ï–ô –í –õ–û–ì–ï:')
    for i, line in enumerate(lines[:5], 1):
        print(f'   {i}. {line.strip()}')
    
    if len(lines) > 5:
        print(f'   ... –∏ –µ—â–µ {len(lines) - 5} –∑–∞–ø–∏—Å–µ–π')
    
    print()
    print('üìä –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í:')
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    integration_count = sum(1 for line in lines if 'logging_integration_completed' in line)
    market_data_start = sum(1 for line in lines if 'get_market_data initiated' in line)
    api_calls = sum(1 for line in lines if 'get_klines initiated' in line or 'Binance API call executed' in line)
    completions = sum(1 for line in lines if 'completed successfully' in line)
    
    print(f'   üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {integration_count}')
    print(f'   üöÄ –ó–∞–ø—É—Å–∫–æ–≤ get_market_data: {market_data_start}')
    print(f'   üåê API –≤—ã–∑–æ–≤–æ–≤: {api_calls}')
    print(f'   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π: {completions}')
    
    print()
    print('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:')
    print('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è MarketDataService —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    print('‚úÖ JSON –ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª')
    print('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å trace IDs')
    print('‚úÖ –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π')

else:
    print('‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –ù–ï –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º!')

print()
print('üìÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')