import pandas as pd
from decimal import Decimal
from datetime import datetime
from src.market_data.market_data_service import MarketDataSet

def test_dataframe_protection():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö DataFrames."""
    print("=== –¢–ï–°–¢: –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–• DataFrames ===\n")
    
    # CASE 1: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ DataFrames
    empty_df = pd.DataFrame(columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    
    market_data_empty = MarketDataSet(
        symbol="BTCUSDT",
        timestamp=datetime.utcnow(),
        daily_candles=empty_df,
        h4_candles=empty_df,
        h1_candles=empty_df,
        rsi_14=Decimal('50.0'),
        macd_signal="neutral",
        ma_20=Decimal('50000.0'),
        ma_50=Decimal('50000.0'),
        ma_trend="sideways",
        support_level=Decimal('49000.0'),
        resistance_level=Decimal('51000.0')
    )
    
    context_empty = market_data_empty.to_llm_context_basic()
    if "NO MARKET DATA AVAILABLE" in context_empty:
        print("‚úÖ –ü–£–°–¢–´–ï DataFrames: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    else:
        print("‚ùå –ü–£–°–¢–´–ï DataFrames: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    # CASE 2: DataFrames —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (<24 —á–∞—Å–∞)
    short_data = [[1640995200000, 50000, 51000, 49000, 50500, 100]] * 10  # –¢–æ–ª—å–∫–æ 10 —á–∞—Å–æ–≤
    df_short = pd.DataFrame(short_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    for col in ['open', 'high', 'low', 'close', 'volume']:
        df_short[col] = pd.to_numeric(df_short[col])
    df_short['timestamp'] = pd.to_datetime(df_short['timestamp'], unit='ms')
    df_short = df_short[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
    
    market_data_short = MarketDataSet(
        symbol="ETHUSDT",
        timestamp=datetime.utcnow(),
        daily_candles=df_short,
        h4_candles=df_short,
        h1_candles=df_short,
        rsi_14=Decimal('45.0'),
        macd_signal="bullish",
        ma_20=Decimal('4000.0'),
        ma_50=Decimal('3950.0'),
        ma_trend="uptrend",
        support_level=Decimal('3900.0'),
        resistance_level=Decimal('4100.0')
    )
    
    context_short = market_data_short.to_llm_context_basic()
    if "Current Price:" in context_short and "24H Change:" in context_short:
        print("‚úÖ –ö–û–†–û–¢–ö–ò–ï DataFrames: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    else:
        print("‚ùå –ö–û–†–û–¢–ö–ò–ï DataFrames: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
    
    # CASE 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º _calculate_24h_change —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    change_empty = market_data_empty._calculate_24h_change()
    change_short = market_data_short._calculate_24h_change()
    
    print(f"‚úÖ 24H Change (–ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ): {change_empty}")
    print(f"‚úÖ 24H Change (–∫–æ—Ä–æ—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ): {change_short}")
    
    # CASE 4: DataFrame —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    nan_data = [[1640995200000, 50000, None, 49000, 50500, 100]] * 25
    df_nan = pd.DataFrame(nan_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    for col in ['open', 'high', 'low', 'close', 'volume']:
        df_nan[col] = pd.to_numeric(df_nan[col], errors='coerce')  # NaN –¥–ª—è None
    df_nan['timestamp'] = pd.to_datetime(df_nan['timestamp'], unit='ms')
    df_nan = df_nan[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
    
    market_data_nan = MarketDataSet(
        symbol="ADAUSDT",
        timestamp=datetime.utcnow(),
        daily_candles=df_nan,
        h4_candles=df_nan,
        h1_candles=df_nan,
        rsi_14=Decimal('55.0'),
        macd_signal="bearish",
        ma_20=Decimal('1.50'),
        ma_50=Decimal('1.45'),
        ma_trend="downtrend",
        support_level=Decimal('1.40'),
        resistance_level=Decimal('1.60')
    )
    
    try:
        context_nan = market_data_nan.to_llm_context_basic()
        if "Current Price:" in context_nan:
            print("‚úÖ NaN DataFrames: –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ö†Ô∏è NaN DataFrames: Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ")
    except Exception as e:
        print(f"‚ùå NaN DataFrames: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {e}")
    
    print("\nüéØ –í–°–ï EDGE CASES –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")

if __name__ == "__main__":
    test_dataframe_protection()