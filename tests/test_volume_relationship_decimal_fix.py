"""
Тесты для проверки исправления volume calculation inconsistency в _analyze_volume_relationship.
Проверяет корректность Decimal арифметики в анализе volume-price relationship.
"""

import pytest
from decimal import Decimal
from src.market_data.market_data_service import MarketDataService

class TestVolumeRelationshipDecimalFix:
    """Тесты для проверки Decimal арифметики в _analyze_volume_relationship."""
    
    def setup_method(self):
        """Настройка тестов."""
        self.service = MarketDataService()
    
    def test_strong_bullish_confirmation_decimal_precision(self):
        """Тест сильного бычьего подтверждения с Decimal точностью."""
        # Восходящий тренд с увеличивающимся объемом
        candles = [
            [0, "50000.123456789", "50100.000000000", "49900.000000000", "50000.123456789", "1000.123456789"],
            [0, "50000.123456789", "50150.000000000", "49950.000000000", "50025.234567890", "1200.234567890"],
            [0, "50025.234567890", "50200.000000000", "50000.000000000", "50100.345678901", "1500.345678901"],  # Растущий объем
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        # Цена растет и объем увеличивается
        assert result == "Strong bullish confirmation"
    
    def test_strong_bearish_confirmation_decimal_precision(self):
        """Тест сильного медвежьего подтверждения с Decimal точностью."""
        # Нисходящий тренд с увеличивающимся объемом
        candles = [
            [0, "50100.987654321", "50200.000000000", "50000.000000000", "50100.987654321", "1000.987654321"],
            [0, "50100.987654321", "50150.000000000", "49950.000000000", "50050.876543210", "1200.876543210"],
            [0, "50050.876543210", "50100.000000000", "49900.000000000", "50000.765432109", "1500.765432109"],  # Растущий объем
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        # Цена падает и объем увеличивается
        assert result == "Strong bearish confirmation"
    
    def test_weak_bullish_signal_decimal_precision(self):
        """Тест слабого бычьего сигнала с Decimal точностью."""
        # Восходящий тренд с уменьшающимся объемом
        candles = [
            [0, "50000.111111111", "50100.000000000", "49900.000000000", "50000.111111111", "1500.111111111"],
            [0, "50000.111111111", "50150.000000000", "49950.000000000", "50025.222222222", "1200.222222222"],
            [0, "50025.222222222", "50200.000000000", "50000.000000000", "50100.333333333", "1000.333333333"],  # Падающий объем
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        # Цена растет, но объем уменьшается
        assert result == "Weak bullish signal"
    
    def test_weak_bearish_signal_decimal_precision(self):
        """Тест слабого медвежьего сигнала с Decimal точностью."""
        # Нисходящий тренд с уменьшающимся объемом
        candles = [
            [0, "50100.444444444", "50200.000000000", "50000.000000000", "50100.444444444", "1500.444444444"],
            [0, "50100.444444444", "50150.000000000", "49950.000000000", "50050.555555555", "1200.555555555"],
            [0, "50050.555555555", "50100.000000000", "49900.000000000", "50000.666666666", "1000.666666666"],  # Падающий объем
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        # Цена падает и объем уменьшается
        assert result == "Weak bearish signal"
    
    def test_mixed_signals_decimal_precision(self):
        """Тест смешанных сигналов с Decimal точностью."""
        # Боковое движение: цена не меняется, объем тоже остается примерно одинаковым
        candles = [
            [0, "50000.777777777", "50100.000000000", "49900.000000000", "50000.777777777", "1000.777777777"],
            [0, "50000.777777777", "50100.000000000", "49900.000000000", "50000.888888888", "1000.888888888"],
            [0, "50000.888888888", "50100.000000000", "49900.000000000", "50000.777777777", "1000.777777777"],  # Возврат к начальной цене
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        # Цена вернулась к началу, объем почти не изменился - должен быть weak bearish (цена немного упала, объем меньше среднего)
        assert result == "Weak bearish signal"
    
    def test_high_precision_decimal_values(self):
        """Тест с очень высокой точностью Decimal значений."""
        # Минимальные различия в объемах и ценах
        candles = [
            [0, "50000.000000000", "50000.100000000", "49999.900000000", "50000.000000000000000001", "1000.000000000000000001"],
            [0, "50000.000000000000000001", "50000.100000000", "49999.900000000", "50000.000000000000000002", "1000.000000000000000002"],
            [0, "50000.000000000000000002", "50000.100000000", "49999.900000000", "50000.000000000000000003", "2000.000000000000000003"],  # Объем удваивается
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        # При очень маленьких различиях должен корректно определить тренд
        assert result == "Strong bullish confirmation"
    
    def test_insufficient_data(self):
        """Тест недостаточного количества данных."""
        # Меньше 3 candles
        candles = [
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50000.000000000", "1000.000000000"],
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50050.000000000", "1200.000000000"],
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        assert result == "Insufficient data"
    
    def test_empty_candles_list(self):
        """Тест пустого списка candles."""
        candles = []
        
        result = self.service._analyze_volume_relationship(candles)
        
        assert result == "Insufficient data"
    
    def test_volume_average_calculation_precision(self):
        """Тест точности расчета среднего объема."""
        # Объемы с высокой точностью
        candles = [
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50000.000000000", "1000.123456789012345"],
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50000.000000000", "1000.234567890123456"],
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50100.000000000", "1000.345678901234567"],  # Последний объем больше среднего
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        # Среднее: (1000.123456789012345 + 1000.234567890123456 + 1000.345678901234567) / 3
        # Последний объем больше среднего, цена выросла
        assert result == "Strong bullish confirmation"
    
    def test_real_cryptocurrency_volumes(self):
        """Тест с реальными криптовалютными объемами."""
        # Реальные BTC объемы (в BTC)
        candles = [
            [0, "67234.56789012345", "67500.000000000", "67000.000000000", "67234.56789012345", "123.456789012345"],
            [0, "67234.56789012345", "67600.000000000", "67100.000000000", "67345.67890123456", "156.789012345678"],
            [0, "67345.67890123456", "67700.000000000", "67200.000000000", "67456.78901234567", "234.567890123456"],  # Значительно больший объем
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        # Цена растет с увеличивающимся объемом
        assert result == "Strong bullish confirmation"
    
    def test_decimal_arithmetic_consistency(self):
        """Тест консистентности Decimal арифметики."""
        # Проверка что Decimal арифметика не создает проблем с точностью
        candles = [
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50000.000000000", "1000.0"],
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50000.000000000", "1000.0"],
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50100.000000000", "1200.0"],  # Последний объем > среднего
        ]
        
        result = self.service._analyze_volume_relationship(candles)
        
        # Среднее: (1000 + 1000 + 1200) / 3 = 1066.67, последний объем 1200 > среднего
        assert result == "Strong bullish confirmation"

def test_decimal_import_in_volume_method():
    """Проверка что Decimal доступен в методе _analyze_volume_relationship."""
    service = MarketDataService()
    
    # Простой тест с валидными данными
    candles = [
        [0, "50000.000000000", "50100.000000000", "49900.000000000", "50000.000000000", "1000.000000000"],
        [0, "50000.000000000", "50100.000000000", "49900.000000000", "50025.000000000", "1100.000000000"],
        [0, "50025.000000000", "50100.000000000", "49900.000000000", "50050.000000000", "1200.000000000"],
    ]
    
    result = service._analyze_volume_relationship(candles)
    
    # Не должно выбрасывать исключение
    assert isinstance(result, str)
    expected_results = [
        "Strong bullish confirmation", "Strong bearish confirmation",
        "Weak bullish signal", "Weak bearish signal", "Mixed signals", "Insufficient data"
    ]
    assert result in expected_results

if __name__ == "__main__":
    pytest.main([__file__, "-v"])