import pandas as pd
from decimal import Decimal
from datetime import datetime
import pytest
from src.market_data.market_data_service import MarketDataSet
from src.market_data.exceptions import DataFrameValidationError

def test_dataframe_protection():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö DataFrames."""
    print("=== –¢–ï–°–¢: –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–• DataFrames ===\n")
    
    # CASE 1: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ DataFrames - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã
    empty_df = pd.DataFrame(columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø—É—Å—Ç—ã–µ DataFrames –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è
    with pytest.raises(DataFrameValidationError) as exc_info:
        MarketDataSet(
            symbol="BTCUSDT",
            timestamp=datetime.utcnow(),
            daily_candles=empty_df,
            h4_candles=empty_df,
            h1_candles=empty_df,
            rsi_14=Decimal('50.0'),
            macd_signal="neutral",
            ma_20=Decimal('50000.0'),
            ma_50=Decimal('50000.0'),
            ma_trend="sideways",
            support_level=Decimal('49000.0'),
            resistance_level=Decimal('51000.0')
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if "cannot be empty" in str(exc_info.value):
        print("‚úÖ –ü–£–°–¢–´–ï DataFrames: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
    else:
        print("‚ùå –ü–£–°–¢–´–ï DataFrames: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    
    # CASE 2: DataFrames —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    short_data = [[1640995200000, 50000, 51000, 49000, 50500, 100]] * 10  # –¢–æ–ª—å–∫–æ 10 —Å—Ç—Ä–æ–∫
    df_short = pd.DataFrame(short_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    for col in ['open', 'high', 'low', 'close', 'volume']:
        df_short[col] = pd.to_numeric(df_short[col])
    df_short['timestamp'] = pd.to_datetime(df_short['timestamp'], unit='ms')
    df_short = df_short[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–µ DataFrames –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è
    with pytest.raises(DataFrameValidationError) as exc_info2:
        MarketDataSet(
            symbol="ETHUSDT",
            timestamp=datetime.utcnow(),
            daily_candles=df_short,
            h4_candles=df_short,
            h1_candles=df_short,
            rsi_14=Decimal('45.0'),
            macd_signal="bullish",
            ma_20=Decimal('4000.0'),
            ma_50=Decimal('3950.0'),
            ma_trend="uptrend",
            support_level=Decimal('3900.0'),
            resistance_level=Decimal('4100.0')
        )
    
    if "must have at least" in str(exc_info2.value):
        print("‚úÖ –ö–û–†–û–¢–ö–ò–ï DataFrames: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
    else:
        print("‚ùå –ö–û–†–û–¢–ö–ò–ï DataFrames: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        
    # CASE 2B: –í–∞–ª–∏–¥–Ω—ã–µ DataFrames —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—ã –æ–∫–æ–ª–æ 4000 –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å MA20=4000
    valid_data = [[1640995200000 + i*3600000, 3950+i*2, 4050+i*2, 3900+i*2, 4000+i*2, 100+i] for i in range(35)]
    df_valid = pd.DataFrame(valid_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    for col in ['open', 'high', 'low', 'close', 'volume']:
        df_valid[col] = pd.to_numeric(df_valid[col])
    df_valid['timestamp'] = pd.to_datetime(df_valid['timestamp'], unit='ms')
    df_valid = df_valid[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
    
    market_data_valid = MarketDataSet(
        symbol="ETHUSDT",
        timestamp=datetime.utcnow(),
        daily_candles=df_valid,
        h4_candles=df_valid[:15],  # 15 4H candles (–º–∏–Ω–∏–º—É–º 10)
        h1_candles=df_valid[:20],  # 20 1H candles (–º–∏–Ω–∏–º—É–º 10)
        rsi_14=Decimal('45.0'),
        macd_signal="bullish",
        ma_20=Decimal('4000.0'),
        ma_50=Decimal('3950.0'),
        ma_trend="uptrend",
        support_level=Decimal('3900.0'),
        resistance_level=Decimal('4100.0')
    )
    
    context_valid = market_data_valid.to_llm_context_basic()
    if "Current Price:" in context_valid and "24H Change:" in context_valid:
        print("‚úÖ –í–ê–õ–ò–î–ù–´–ï DataFrames: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    else:
        print("‚ùå –í–ê–õ–ò–î–ù–´–ï DataFrames: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
    
    # CASE 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º _calculate_24h_change —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    change_valid = market_data_valid._calculate_24h_change()
    
    print(f"‚úÖ 24H Change (–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): {change_valid}")
    
    # CASE 4: DataFrame —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ - —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—ã –æ–∫–æ–ª–æ 1.50 –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å MA20=1.50
    nan_data = [[1640995200000 + i*3600000, 1.45, None, 1.40, 1.50, 100] for i in range(35)]
    df_nan = pd.DataFrame(nan_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    for col in ['open', 'high', 'low', 'close', 'volume']:
        df_nan[col] = pd.to_numeric(df_nan[col], errors='coerce')  # NaN –¥–ª—è None
    df_nan['timestamp'] = pd.to_datetime(df_nan['timestamp'], unit='ms')
    df_nan = df_nan[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ DataFrames —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è
    with pytest.raises(DataFrameValidationError) as exc_info3:
        MarketDataSet(
            symbol="ADAUSDT",
            timestamp=datetime.utcnow(),
            daily_candles=df_nan,
            h4_candles=df_nan[:15],   # 15 4H candles
            h1_candles=df_nan[:20],   # 20 1H candles
            rsi_14=Decimal('55.0'),
            macd_signal="bearish",
            ma_20=Decimal('1.50'),
            ma_50=Decimal('1.55'),    # MA50 > MA20 –¥–ª—è downtrend
            ma_trend="downtrend",
            support_level=Decimal('1.40'),
            resistance_level=Decimal('1.60')
        )
    
    if "contains NaN values" in str(exc_info3.value):
        print("‚úÖ NaN DataFrames: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
    else:
        print("‚ùå NaN DataFrames: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    
    print("\nüéØ –í–°–ï EDGE CASES –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")

if __name__ == "__main__":
    test_dataframe_protection()