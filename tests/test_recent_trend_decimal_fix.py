"""
Тесты для проверки исправления float conversion в _analyze_recent_trend.
Проверяет корректность Decimal арифметики в анализе recent trend.
"""

import pytest
from decimal import Decimal
from src.market_data.market_data_service import MarketDataService

class TestRecentTrendDecimalFix:
    """Тесты для проверки Decimal арифметики в _analyze_recent_trend."""
    
    def setup_method(self):
        """Настройка тестов."""
        self.service = MarketDataService()
    
    def test_strong_uptrend_decimal_precision(self):
        """Тест сильного восходящего тренда с Decimal точностью."""
        # Candles с последовательным ростом (высокая точность)
        candles = [
            [0, "50000.123456789", "50100.000000000", "49900.000000000", "50000.123456789", "1000"],
            [0, "50000.123456789", "50150.000000000", "49950.000000000", "50050.234567890", "1000"],
            [0, "50050.234567890", "50200.000000000", "50000.000000000", "50100.345678901", "1000"],
        ]
        
        result = self.service._analyze_recent_trend(candles)
        
        # Должен определить сильный восходящий тренд
        assert result == "Strong Uptrend"
    
    def test_strong_downtrend_decimal_precision(self):
        """Тест сильного нисходящего тренда с Decimal точностью."""
        # Candles с последовательным падением (высокая точность)
        candles = [
            [0, "50100.987654321", "50200.000000000", "50000.000000000", "50100.987654321", "1000"],
            [0, "50100.987654321", "50150.000000000", "49950.000000000", "50050.876543210", "1000"],
            [0, "50050.876543210", "50100.000000000", "49900.000000000", "50000.765432109", "1000"],
        ]
        
        result = self.service._analyze_recent_trend(candles)
        
        # Должен определить сильный нисходящий тренд
        assert result == "Strong Downtrend"
    
    def test_upward_bias_decimal_precision(self):
        """Тест восходящего смещения с Decimal точностью."""
        # Последняя цена выше первой, но не строгая последовательность
        candles = [
            [0, "50000.111111111", "50100.000000000", "49900.000000000", "50000.111111111", "1000"],
            [0, "50000.111111111", "50150.000000000", "49950.000000000", "49980.222222222", "1000"],  # Падение
            [0, "49980.222222222", "50200.000000000", "49950.000000000", "50050.333333333", "1000"],  # Рост
        ]
        
        result = self.service._analyze_recent_trend(candles)
        
        # Должен определить восходящее смещение (last > first)
        assert result == "Upward bias"
    
    def test_downward_bias_decimal_precision(self):
        """Тест нисходящего смещения с Decimal точностью."""
        # Последняя цена ниже первой, но не строгая последовательность
        candles = [
            [0, "50100.888888888", "50200.000000000", "50000.000000000", "50100.888888888", "1000"],
            [0, "50100.888888888", "50150.000000000", "49950.000000000", "50120.777777777", "1000"],  # Рост
            [0, "50120.777777777", "50150.000000000", "49900.000000000", "50050.666666666", "1000"],  # Падение
        ]
        
        result = self.service._analyze_recent_trend(candles)
        
        # Должен определить нисходящее смещение (last < first)
        assert result == "Downward bias"
    
    def test_sideways_trend_decimal_precision(self):
        """Тест бокового движения с Decimal точностью."""
        # Цены остаются примерно на том же уровне (first == last)
        candles = [
            [0, "50000.123456789", "50100.000000000", "49900.000000000", "50000.123456789", "1000"],
            [0, "50000.123456789", "50100.000000000", "49900.000000000", "50010.234567890", "1000"],
            [0, "50010.234567890", "50100.000000000", "49900.000000000", "50000.123456789", "1000"],  # Возвращается к начальной цене
        ]
        
        result = self.service._analyze_recent_trend(candles)
        
        # Должен определить боковое движение (last == first)
        assert result == "Sideways"
    
    def test_high_precision_decimal_values(self):
        """Тест с очень высокой точностью Decimal значений."""
        # Минимальные различия в ценах (проверка точности)
        candles = [
            [0, "50000.000000000", "50000.100000000", "49999.900000000", "50000.000000001", "1000"],
            [0, "50000.000000001", "50000.100000000", "49999.900000000", "50000.000000002", "1000"],
            [0, "50000.000000002", "50000.100000000", "49999.900000000", "50000.000000003", "1000"],
        ]
        
        result = self.service._analyze_recent_trend(candles)
        
        # При очень маленьких различиях должен определить тренд
        assert result == "Strong Uptrend"
    
    def test_insufficient_data(self):
        """Тест недостаточного количества данных."""
        # Меньше 3 candles
        candles = [
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50000.000000000", "1000"],
            [0, "50000.000000000", "50100.000000000", "49900.000000000", "50050.000000000", "1000"],
        ]
        
        result = self.service._analyze_recent_trend(candles)
        
        assert result == "Insufficient data"
    
    def test_empty_candles_list(self):
        """Тест пустого списка candles."""
        candles = []
        
        result = self.service._analyze_recent_trend(candles)
        
        assert result == "Insufficient data"
    
    def test_decimal_comparison_precision(self):
        """Тест точности сравнения Decimal значений."""
        # Значения с очень высокой точностью
        candles = [
            [0, "50000.000000000000000000", "50100.000000000", "49900.000000000", "50000.000000000000000001", "1000"],
            [0, "50000.000000000000000001", "50100.000000000", "49900.000000000", "50000.000000000000000002", "1000"],
            [0, "50000.000000000000000002", "50100.000000000", "49900.000000000", "50000.000000000000000003", "1000"],
        ]
        
        result = self.service._analyze_recent_trend(candles)
        
        # Decimal должен корректно обработать микроскопические различия
        assert result == "Strong Uptrend"
    
    def test_real_cryptocurrency_prices(self):
        """Тест с реальными криптовалютными ценами."""
        # Реальные BTC цены с высокой точностью
        candles = [
            [0, "67234.56789012345", "67500.000000000", "67000.000000000", "67234.56789012345", "1000"],
            [0, "67234.56789012345", "67600.000000000", "67100.000000000", "67345.67890123456", "1000"],
            [0, "67345.67890123456", "67700.000000000", "67200.000000000", "67456.78901234567", "1000"],
        ]
        
        result = self.service._analyze_recent_trend(candles)
        
        # Должен корректно определить тренд с реальными ценами
        assert result == "Strong Uptrend"

def test_decimal_import_in_method():
    """Проверка что Decimal доступен в методе _analyze_recent_trend."""
    service = MarketDataService()
    
    # Простой тест с валидными данными
    candles = [
        [0, "50000.000000000", "50100.000000000", "49900.000000000", "50000.000000000", "1000"],
        [0, "50000.000000000", "50100.000000000", "49900.000000000", "50025.000000000", "1000"],
        [0, "50025.000000000", "50100.000000000", "49900.000000000", "50050.000000000", "1000"],
    ]
    
    result = service._analyze_recent_trend(candles)
    
    # Не должно выбрасывать исключение
    assert isinstance(result, str)
    assert result in ["Strong Uptrend", "Strong Downtrend", "Upward bias", "Downward bias", "Sideways", "Insufficient data"]

if __name__ == "__main__":
    pytest.main([__file__, "-v"])