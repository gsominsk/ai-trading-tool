"""
–¢–µ—Å—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è production safety
"""

import pytest
import sys
import threading
import time
from unittest.mock import patch
from decimal import Decimal
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, "src")

from logging_system.json_formatter import AIOptimizedJSONFormatter, StructuredLogger
from logging_system.trace_generator import get_trace_id, get_flow_id, reset_trace_counter
from logging_system.logger_config import configure_ai_logging


class TestProductionSafetyFixes:
    """–¢–µ—Å—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è production safety."""
    
    def test_systemexit_instead_of_os_exit(self):
        """–¢–µ—Å—Ç: SystemExit(1) –≤–º–µ—Å—Ç–æ os._exit(1) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º—ã–º."""
        logger = StructuredLogger("test_logger", "TestService")
        
        # –≠–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        with patch.object(logger.logger, 'log', side_effect=Exception("Mock logging failure")):
            with pytest.raises(SystemExit) as exc_info:
                logger.info("This should fail")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ SystemExit(1), –∞ –Ω–µ os._exit(1)
            assert exc_info.value.code == 1
            assert exc_info.type == SystemExit
    
    def test_json_serialization_fallback(self):
        """–¢–µ—Å—Ç: JSON serialization –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å fallback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö."""
        formatter = AIOptimizedJSONFormatter("TestService")
        
        # –°–æ–∑–¥–∞–µ–º mock record —Å non-serializable –æ–±—ä–µ–∫—Ç–∞–º–∏
        class MockRecord:
            def __init__(self):
                self.levelname = "INFO"
                self.getMessage = lambda: "Test message"
                self.exc_info = None
                # –î–æ–±–∞–≤–ª—è–µ–º non-serializable –æ–±—ä–µ–∫—Ç
                self.context = {"decimal_value": Decimal("123.45"), "datetime_value": datetime.now()}
                self.operation = "test_operation"
                self.tags = ["test"]
                self.flow = {}
                self.trace_id = "test_trace_123"
        
        record = MockRecord()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å fallback
        result = formatter.format(record)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É (–Ω–µ exception)
        assert isinstance(result, str)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ª–∏–±–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON, –ª–∏–±–æ fallback
        assert "Test message" in result
        assert ("INFO" in result or "FALLBACK_LOG" in result)
    
    def test_thread_safety_trace_generator(self):
        """–¢–µ—Å—Ç: trace generator –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å thread-safe."""
        reset_trace_counter()
        
        trace_ids = []
        
        def generate_trace_ids():
            for _ in range(10):
                trace_ids.append(get_trace_id())
                time.sleep(0.001)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        threads = []
        for _ in range(3):
            thread = threading.Thread(target=generate_trace_ids)
            threads.append(thread)
            thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ trace_id —É–Ω–∏–∫–∞–ª—å–Ω—ã
        assert len(trace_ids) == 30  # 3 threads * 10 ids each
        assert len(set(trace_ids)) == 30  # –í—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
    
    def test_handler_accumulation_prevention(self):
        """–¢–µ—Å—Ç: handlers –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è."""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–≥–≥–µ—Ä–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º
        logger1 = StructuredLogger("same_logger", "TestService")
        initial_handlers_count = len(logger1.logger.handlers)
        
        logger2 = StructuredLogger("same_logger", "TestService")
        second_handlers_count = len(logger2.logger.handlers)
        
        logger3 = StructuredLogger("same_logger", "TestService")
        third_handlers_count = len(logger3.logger.handlers)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ handlers –Ω–µ –¥–æ–ª–∂–Ω–æ —Ä–∞—Å—Ç–∏ –Ω–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ
        assert initial_handlers_count > 0  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω handler
        assert second_handlers_count <= initial_handlers_count + 1  # –ù–µ –±–æ–ª—å—à–µ —á–µ–º +1
        assert third_handlers_count <= initial_handlers_count + 1   # –ù–µ –±–æ–ª—å—à–µ —á–µ–º +1
    
    def test_flow_id_generation_thread_safety(self):
        """–¢–µ—Å—Ç: flow_id generation –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å thread-safe."""
        flow_ids = []
        
        def generate_flow_ids():
            for _ in range(5):
                flow_ids.append(get_flow_id("BTCUSDT"))
                time.sleep(0.001)
        
        threads = []
        for _ in range(4):
            thread = threading.Thread(target=generate_flow_ids)
            threads.append(thread)
            thread.start()
        
        for thread in threads:
            thread.join()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ flow_id –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        assert len(flow_ids) == 20
        for flow_id in flow_ids:
            assert flow_id.startswith("flow_btc_")
            assert len(flow_id.split("_")) == 3
    
    def test_logging_configuration_graceful_failure(self):
        """–¢–µ—Å—Ç: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ gracefully fail."""
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥ –≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º –º–µ—Å—Ç–µ
        with pytest.raises(SystemExit) as exc_info:
            configure_ai_logging(
                log_level="INFO",
                log_file="/root/impossible/path/test.log"  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—É—Ç—å
            )
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å SystemExit, –∞ –Ω–µ os._exit
        assert exc_info.value.code == 1
        assert exc_info.type == SystemExit


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ production safety –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_suite = TestProductionSafetyFixes()
    
    try:
        test_suite.test_systemexit_instead_of_os_exit()
        print("‚úÖ SystemExit test passed")
    except Exception as e:
        print(f"‚ùå SystemExit test failed: {e}")
    
    try:
        test_suite.test_json_serialization_fallback()
        print("‚úÖ JSON serialization fallback test passed")
    except Exception as e:
        print(f"‚ùå JSON serialization test failed: {e}")
    
    try:
        test_suite.test_thread_safety_trace_generator()
        print("‚úÖ Thread safety test passed")
    except Exception as e:
        print(f"‚ùå Thread safety test failed: {e}")
    
    try:
        test_suite.test_handler_accumulation_prevention()
        print("‚úÖ Handler accumulation test passed")
    except Exception as e:
        print(f"‚ùå Handler accumulation test failed: {e}")
    
    try:
        test_suite.test_flow_id_generation_thread_safety()
        print("‚úÖ Flow ID thread safety test passed")
    except Exception as e:
        print(f"‚ùå Flow ID thread safety test failed: {e}")
    
    print("üéâ –í—Å–µ production safety —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")