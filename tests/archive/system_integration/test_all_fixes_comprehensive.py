#!/usr/bin/env python3
"""
üß™ COMPREHENSIVE TESTING OF ALL FIXES
Testing real MarketDataService functionality after all bugfixes
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from decimal import Decimal
from src.market_data.market_data_service import MarketDataService

def print_section(title):
    print(f"\n{'='*60}")
    print(f"üß™ {title}")
    print('='*60)

def test_rsi_division_protection():
    """–¢–µ—Å—Ç 1: RSI –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å"""
    print_section("RSI DIVISION BY ZERO PROTECTION")
    
    service = MarketDataService()
    
    # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
    try:
        result = service.get_market_data("BTCUSDT")
        # RSI —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç–µ MarketDataSet, –∞ –Ω–µ –≤ DataFrame
        rsi_14 = result.rsi_14
        
        print(f"‚úÖ BTCUSDT RSI Results:")
        print(f"   RSI(14): {rsi_14} (—Ç–∏–ø: {type(rsi_14)})")
        print(f"   Data frames:")
        print(f"     Daily: {len(result.daily_candles)} —Å–≤–µ—á–µ–π")
        print(f"     4H: {len(result.h4_candles)} —Å–≤–µ—á–µ–π")
        print(f"     1H: {len(result.h1_candles)} —Å–≤–µ—á–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Decimal
        if isinstance(rsi_14, Decimal):
            print(f"‚úÖ RSI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Decimal (–Ω–µ float)")
        else:
            print(f"‚ùå RSI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {type(rsi_14)} –≤–º–µ—Å—Ç–æ Decimal")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSI: {e}")

def test_state_pollution():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏"""
    print_section("STATE POLLUTION PROTECTION")
    
    service = MarketDataService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        btc_result = service.get_market_data("BTCUSDT")
        eth_result = service.get_market_data("ETHUSDT")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∞–ª—è—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        btc_price = btc_result.h1_candles.iloc[-1]['close']  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
        eth_price = eth_result.h1_candles.iloc[-1]['close']
        
        print(f"‚úÖ BTC –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {btc_price}")
        print(f"‚úÖ ETH –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {eth_price}")
        
        if btc_price != eth_price:
            print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–æ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏")
        else:
            print(f"‚ùå –í–æ–∑–º–æ–∂–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–æ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–µ–Ω—ã)")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø–∏—Å–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        print(f"‚úÖ BTC symbol: {btc_result.symbol}")
        print(f"‚úÖ ETH symbol: {eth_result.symbol}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–ª—è—Ü–∏–∏: {e}")

def test_decimal_precision():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Decimal —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    print_section("DECIMAL PRECISION VERIFICATION")
    
    service = MarketDataService()
    
    try:
        result = service.get_market_data("BTCUSDT")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Decimal —Ç–∏–ø—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—è—Ö
        print(f"‚úÖ MarketDataSet Decimal Fields:")
        print(f"   RSI: {result.rsi_14} (—Ç–∏–ø: {type(result.rsi_14)})")
        print(f"   MA20: {result.ma_20} (—Ç–∏–ø: {type(result.ma_20)})")
        print(f"   MA50: {result.ma_50} (—Ç–∏–ø: {type(result.ma_50)})")
        
        if result.support_level:
            print(f"   Support: {result.support_level} (—Ç–∏–ø: {type(result.support_level)})")
        if result.resistance_level:
            print(f"   Resistance: {result.resistance_level} (—Ç–∏–ø: {type(result.resistance_level)})")
        if result.btc_correlation:
            print(f"   BTC Corr: {result.btc_correlation} (—Ç–∏–ø: {type(result.btc_correlation)})")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Decimal
        decimal_fields = [result.rsi_14, result.ma_20, result.ma_50]
        if all(isinstance(field, Decimal) for field in decimal_fields):
            print(f"   ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç Decimal –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫—É")
        else:
            print(f"   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –Ω–µ Decimal")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Decimal: {e}")

def test_dataframe_protection():
    """–¢–µ—Å—Ç 4: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö DataFrame"""
    print_section("DATAFRAME PROTECTION")
    
    service = MarketDataService()
    
    try:
        result = service.get_market_data("BTCUSDT")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
        basic_context = result.to_llm_context_basic()
        
        print(f"‚úÖ Basic Context —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"   –î–ª–∏–Ω–∞: {len(basic_context)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {basic_context[:200]}...")
        
        if "Error" not in basic_context and "Exception" not in basic_context:
            print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –æ—à–∏–±–æ–∫")
        else:
            print(f"‚ùå –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

def test_symbol_validation():
    """–¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤"""
    print_section("SYMBOL VALIDATION")
    
    service = MarketDataService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    valid_symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT"]
    
    for symbol in valid_symbols:
        try:
            result = service.get_market_data(symbol)
            print(f"‚úÖ {symbol}: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            print(f"   Symbol –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {result.symbol}")
        except Exception as e:
            print(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ - {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    invalid_symbols = ["INVALID", "BTCUSDTUSDT", "BT"]
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:")
    for symbol in invalid_symbols:
        try:
            result = service.get_market_data(symbol)
            print(f"‚ùå {symbol}: –ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.symbol}")
        except Exception as e:
            print(f"‚úÖ {symbol}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω - {e}")

def test_technical_indicators():
    """–¢–µ—Å—Ç 6: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"""
    print_section("TECHNICAL INDICATORS REAL CONDITIONS")
    
    service = MarketDataService()
    
    try:
        result = service.get_market_data("BTCUSDT")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç–µ MarketDataSet, –∞ –Ω–µ –≤ DataFrame
        print(f"\nüìä Technical Indicators from MarketDataSet:")
        
        print(f"   RSI(14): {result.rsi_14}")
        print(f"   MACD Signal: {result.macd_signal}")
        print(f"   MA(20): {result.ma_20}")
        print(f"   MA(50): {result.ma_50}")
        print(f"   MA Trend: {result.ma_trend}")
        print(f"   Volume Profile: {result.volume_profile}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        indicators_check = [
            (result.rsi_14, "RSI", lambda x: 0 <= x <= 100),
            (result.macd_signal, "MACD", lambda x: x in ["bullish", "bearish", "neutral"]),
            (result.ma_trend, "MA Trend", lambda x: x in ["uptrend", "downtrend", "sideways"]),
            (result.volume_profile, "Volume", lambda x: x in ["high", "low", "normal"])
        ]
        
        all_valid = True
        for value, name, validator in indicators_check:
            if validator(value):
                print(f"   ‚úÖ {name}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            else:
                print(f"   ‚ùå {name}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
                all_valid = False
                
        if all_valid:
            print(f"   ‚úÖ –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")

def test_pattern_recognition():
    """–¢–µ—Å—Ç 7: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print_section("PATTERN RECOGNITION")
    
    service = MarketDataService()
    
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ enhanced context, –∞ –Ω–µ –≤ MarketDataSet
        result = service.get_market_data("BTCUSDT")
        
        print(f"‚úÖ MarketDataSet —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {result.symbol}")
        print(f"   Support Level: {result.support_level}")
        print(f"   Resistance Level: {result.resistance_level}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º enhanced context —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Enhanced Context —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏:")
        enhanced_context = service.get_enhanced_context("BTCUSDT")
        
        if "CANDLESTICK ANALYSIS" in enhanced_context:
            print(f"‚úÖ Enhanced context —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            print(f"   –î–ª–∏–Ω–∞ enhanced context: {len(enhanced_context)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            pattern_keywords = ["Hammer", "Doji", "Shooting Star", "Strong Bull", "Strong Bear"]
            found_patterns = [kw for kw in pattern_keywords if kw in enhanced_context]
            
            if found_patterns:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {found_patterns}")
            else:
                print(f"‚ö†Ô∏è –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
        else:
            print(f"‚ùå Enhanced context –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

def main():
    print("üöÄ STARTING COMPREHENSIVE TESTING OF ALL FIXES")
    print("=" * 80)
    
    # Execute all tests
    test_rsi_division_protection()
    test_state_pollution()
    test_decimal_precision()
    test_dataframe_protection()
    test_symbol_validation()
    test_technical_indicators()
    test_pattern_recognition()
    
    print(f"\n{'='*80}")
    print("üéâ COMPREHENSIVE TESTING COMPLETED")
    print("="*80)
    
    print("\nüìã –ü–†–û–í–ï–†–¨–¢–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("   ‚úÖ - –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("   ‚ùå - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞")
    print("   ‚ö†Ô∏è - –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")

if __name__ == "__main__":
    main()