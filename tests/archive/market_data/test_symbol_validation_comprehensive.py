import pytest
from src.market_data.market_data_service import MarketDataService

def test_symbol_validation_comprehensive():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö edge cases."""
    service = MarketDataService()
    
    print("=== –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –°–ò–ú–í–û–õ–û–í ===\n")
    
    # GROUP 1: Valid symbols - –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    valid_test_cases = [
        ("BTCUSDT", "Bitcoin"),
        ("ETHUSDT", "Ethereum"),
        ("ADAUSDT", "Cardano"),
        ("DOTUSDT", "Polkadot"),
        ("SOLUSDT", "Solana"),
        ("LINKUSDT", "Chainlink"),
        ("ATOMUSDT", "Cosmos"),
        ("AVAXUSDT", "Avalanche"),
        ("MATICUSDT", "Polygon"),
        ("ALGOUSDT", "Algorand"),
    ]
    
    print("‚úÖ –í–ê–õ–ò–î–ù–´–ï –°–ò–ú–í–û–õ–´:")
    passed_valid = 0
    for symbol, name in valid_test_cases:
        try:
            service._validate_symbol_input(symbol)
            print(f"  ‚úì {symbol} ({name})")
            passed_valid += 1
        except Exception as e:
            print(f"  ‚úó {symbol} FAILED: {e}")
    
    # GROUP 2: Invalid format - –æ–±—â–∏–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
    format_error_cases = [
        ("", "Empty string"),
        ("BTC", "No USDT suffix"),
        ("ETHBTC", "Wrong suffix (BTC)"),
        ("BTCUSD", "Wrong suffix (USD)"),
        ("btcusdt", "Lowercase"),
        ("BTCUSDT!", "Special char at end"),
        ("USDT", "Only USDT"),
        ("ABCDEFGHIJKLMNOPUSDT", "Too long"),
    ]
    
    print(f"\n‚ùå –û–®–ò–ë–ö–ò –§–û–†–ú–ê–¢–ê:")
    passed_format = 0
    for symbol, reason in format_error_cases:
        try:
            service._validate_symbol_input(symbol)
            print(f"  ‚úó {symbol} SHOULD FAIL: {reason}")
        except ValueError:
            print(f"  ‚úì {symbol} correctly rejected ({reason})")
            passed_format += 1
    
    # GROUP 3: Invalid characters - –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    character_error_cases = [
        ("BTC123USDT", "Contains digits"),
        ("BTC-USDT", "Contains hyphen"), 
        ("BTC_USDT", "Contains underscore"),
        ("BTC.USDT", "Contains dot"),
        ("BTC@USDT", "Contains at-sign"),
        ("123USDT", "Starts with digit"),
        ("1BTCUSDT", "Digit at start"),
        ("BTC1USDT", "Digit in middle"),
        ("B2CUSDT", "Digit in middle"),
    ]
    
    print(f"\nüî§ –û–®–ò–ë–ö–ò –°–ò–ú–í–û–õ–û–í:")
    passed_chars = 0
    for symbol, reason in character_error_cases:
        try:
            service._validate_symbol_input(symbol)
            print(f"  ‚úó {symbol} SHOULD FAIL: {reason}")
        except ValueError:
            print(f"  ‚úì {symbol} correctly rejected ({reason})")
            passed_chars += 1
    
    # GROUP 4: Edge cases - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    edge_cases = [
        ("USDTUSDT", "USDT at start"),
        ("BTCUSDTUSDT", "Double USDT"),
        ("USDTBTC", "Reverse order"),
        ("BTCUSDTEXTRA", "Text after USDT"),
        ("AAAAAAUSDT", "Very long base (6 chars)"),
        ("TOOLONGUSDT", "Very long base (7 chars)"),
        ("AUSDT", "Single letter base"),
        ("ABUSDT", "Two letter base"),
    ]
    
    print(f"\nüéØ EDGE CASES:")
    passed_edge = 0
    for symbol, reason in edge_cases:
        try:
            service._validate_symbol_input(symbol)
            print(f"  ‚úó {symbol} SHOULD FAIL: {reason}")
        except ValueError:
            print(f"  ‚úì {symbol} correctly rejected ({reason})")
            passed_edge += 1
    
    # SUMMARY
    total_valid = len(valid_test_cases)
    total_invalid = len(format_error_cases) + len(character_error_cases) + len(edge_cases)
    
    print(f"\nüìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"Valid symbols: {passed_valid}/{total_valid} passed")
    print(f"Invalid symbols: {passed_format + passed_chars + passed_edge}/{total_invalid} correctly rejected")
    
    # Assertions for pytest
    assert passed_valid == total_valid, f"Not all valid symbols passed: {passed_valid}/{total_valid}"
    assert passed_format == len(format_error_cases), f"Format errors not caught properly"
    assert passed_chars == len(character_error_cases), f"Character errors not caught properly"
    assert passed_edge == len(edge_cases), f"Edge cases not handled properly"
    
    print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ.")
    
    return {
        "valid_passed": passed_valid,
        "valid_total": total_valid,
        "invalid_rejected": passed_format + passed_chars + passed_edge,
        "invalid_total": total_invalid
    }

if __name__ == "__main__":
    test_symbol_validation_comprehensive()