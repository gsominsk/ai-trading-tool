"""
Fix –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö mock –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—Å—Ç–∞—Ö MarketDataService.

–ü—Ä–æ–±–ª–µ–º–∞: –¢–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç 1-2 —Å–≤–µ—á–∏, –Ω–æ RSI —Ç—Ä–µ–±—É–µ—Ç 14+ –ø–µ—Ä–∏–æ–¥–æ–≤,
–∞ MA —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.

–†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ —Å 50+ —Å–≤–µ—á–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö timeframes.
"""

import pytest
from unittest.mock import Mock, patch
from decimal import Decimal
from datetime import datetime, timedelta
from src.market_data.market_data_service import MarketDataService, MarketDataSet

def generate_realistic_klines(count: int, start_price: float = 50000.0) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ klines –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Args:
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        start_price: –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        
    Returns:
        List of klines –≤ —Ñ–æ—Ä–º–∞—Ç–µ Binance API
    """
    klines = []
    current_price = start_price
    current_time = int((datetime.now() - timedelta(hours=count)).timestamp() * 1000)
    
    for i in range(count):
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (-2% –¥–æ +2% –∑–∞ —á–∞—Å)
        price_change = (i % 10 - 5) * 0.004  # -2% to +2%
        new_price = current_price * (1 + price_change)
        
        # OHLC –¥–∞–Ω–Ω—ã–µ
        open_price = current_price
        close_price = new_price
        high_price = max(open_price, close_price) * 1.005  # +0.5% –≤—ã—Å–æ–∫–∏–π
        low_price = min(open_price, close_price) * 0.995   # -0.5% –Ω–∏–∑–∫–∏–π
        
        # –û–±—ä–µ–º (1000-5000 –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü)
        volume = 1000 + (i % 40) * 100
        
        # Binance klines —Ñ–æ—Ä–º–∞—Ç: [timestamp, open, high, low, close, volume, close_time, quote_volume, count, taker_buy_base, taker_buy_quote, ignore]
        kline = [
            current_time + (i * 3600000),  # timestamp (–∫–∞–∂–¥—ã–π —á–∞—Å)
            f"{open_price:.8f}",
            f"{high_price:.8f}",
            f"{low_price:.8f}",
            f"{close_price:.8f}",
            f"{volume:.8f}",
            current_time + (i * 3600000) + 3599999,  # close_time
            f"{volume * close_price:.8f}",  # quote_asset_volume
            1000 + i,  # number_of_trades
            f"{volume * 0.6:.8f}",  # taker_buy_base_asset_volume
            f"{volume * close_price * 0.6:.8f}",  # taker_buy_quote_asset_volume
            "0"  # ignore
        ]
        
        klines.append(kline)
        current_price = new_price
    
    return klines

def test_mock_data_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mock –¥–∞–Ω–Ω—ã—Ö."""
    print("=== –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò MOCK –î–ê–ù–ù–´–• ===\n")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö timeframes
    daily_data = generate_realistic_klines(180, 50000.0)  # 6 –º–µ—Å—è—Ü–µ–≤
    h4_data = generate_realistic_klines(84, 50000.0)      # 2 –Ω–µ–¥–µ–ª–∏
    h1_data = generate_realistic_klines(60, 50000.0)      # 60 —á–∞—Å–æ–≤ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è MA50)
    
    print(f"‚úÖ Daily data: {len(daily_data)} —Å–≤–µ—á–µ–π")
    print(f"‚úÖ 4H data: {len(h4_data)} —Å–≤–µ—á–µ–π")
    print(f"‚úÖ 1H data: {len(h1_data)} —Å–≤–µ—á–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏
    sample_kline = daily_data[0]
    print(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ kline:")
    print(f"   Timestamp: {sample_kline[0]}")
    print(f"   OHLC: {sample_kline[1]}-{sample_kline[2]}-{sample_kline[3]}-{sample_kline[4]}")
    print(f"   Volume: {sample_kline[5]}")
    print(f"   –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(sample_kline)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è RSI (14 –ø–µ—Ä–∏–æ–¥–æ–≤)
    assert len(h1_data) >= 15, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI: {len(h1_data)} < 15"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è MA (20, 50 –ø–µ—Ä–∏–æ–¥–æ–≤)
    assert len(h1_data) >= 50, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MA50: {len(h1_data)} < 50"
    
    print(f"\n‚úÖ RSI calculation: {len(h1_data)} >= 15 ‚úì")
    print(f"‚úÖ MA20 calculation: {len(h1_data)} >= 20 ‚úì")
    print(f"‚úÖ MA50 calculation: {len(h1_data)} >= 50 ‚úì")
    
    return daily_data, h4_data, h1_data

def test_market_data_service_with_sufficient_mock():
    """–¢–µ—Å—Ç MarketDataService —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ mock –¥–∞–Ω–Ω—ã–º–∏."""
    print("\n=== –¢–ï–°–¢ MARKETDATASERVICE –° –î–û–°–¢–ê–¢–û–ß–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò ===\n")
    
    service = MarketDataService()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    daily_data, h4_data, h1_data = test_mock_data_generation()
    
    with patch('requests.get') as mock_get:
        # Mock response –¥–ª—è –≤—Å–µ—Ö API –≤—ã–∑–æ–≤–æ–≤
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.raise_for_status.return_value = None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö endpoints
        def side_effect(*args, **kwargs):
            params = kwargs.get('params', {})
            interval = params.get('interval', '1h')
            
            mock_response_copy = Mock()
            mock_response_copy.status_code = 200
            mock_response_copy.raise_for_status.return_value = None
            
            if interval == '1d':
                mock_response_copy.json.return_value = daily_data
            elif interval == '4h':
                mock_response_copy.json.return_value = h4_data
            elif interval == '1h':
                mock_response_copy.json.return_value = h1_data
            else:
                mock_response_copy.json.return_value = h1_data
                
            return mock_response_copy
        
        mock_get.side_effect = side_effect
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ market data
        try:
            result = service.get_market_data("BTCUSDT")
            
            print(f"‚úÖ MarketDataSet —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"‚úÖ Symbol: {result.symbol}")
            print(f"‚úÖ RSI: {result.rsi_14} (—Ç–∏–ø: {type(result.rsi_14)})")
            print(f"‚úÖ MA20: {result.ma_20} (—Ç–∏–ø: {type(result.ma_20)})")
            print(f"‚úÖ MA50: {result.ma_50} (—Ç–∏–ø: {type(result.ma_50)})")
            print(f"‚úÖ MACD: {result.macd_signal}")
            print(f"‚úÖ MA Trend: {result.ma_trend}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            assert isinstance(result.rsi_14, Decimal), f"RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal, –ø–æ–ª—É—á–µ–Ω {type(result.rsi_14)}"
            assert isinstance(result.ma_20, Decimal), f"MA20 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal, –ø–æ–ª—É—á–µ–Ω {type(result.ma_20)}"
            assert isinstance(result.ma_50, Decimal), f"MA50 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Decimal, –ø–æ–ª—É—á–µ–Ω {type(result.ma_50)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã RSI
            assert 0 <= result.rsi_14 <= 100, f"RSI –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü: {result.rsi_14}"
            
            print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–®–ï–õ! –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã.")
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            raise

def test_api_structure_validation():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API mock."""
    print("\n=== –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ API MOCK ===\n")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É klines
    klines = generate_realistic_klines(5)
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Binance API format:")
    for i, kline in enumerate(klines[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
        print(f"   Kline {i+1}: {len(kline)} –ø–æ–ª–µ–π")
        print(f"     Timestamp: {kline[0]} ({'‚úì int' if str(kline[0]).isdigit() else '‚úó –Ω–µ int'})")
        print(f"     OHLC: {kline[1:5]} ({'‚úì str' if all(isinstance(x, str) for x in kline[1:5]) else '‚úó –Ω–µ str'})")
        print(f"     Volume: {kline[5]} ({'‚úì str' if isinstance(kline[5], str) else '‚úó –Ω–µ str'})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    sample_kline = klines[0]
    assert len(sample_kline) == 12, f"Kline –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 –ø–æ–ª–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {len(sample_kline)}"
    assert str(sample_kline[0]).isdigit(), f"Timestamp –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: {sample_kline[0]}"
    assert all(isinstance(x, str) for x in sample_kline[1:6]), "OHLCV –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏"
    
    print(f"\n‚úÖ API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {len(sample_kline)} –ø–æ–ª–µ–π, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    test_mock_data_generation()
    test_market_data_service_with_sufficient_mock()
    test_api_structure_validation()